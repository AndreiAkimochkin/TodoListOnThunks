{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useSelector","state","auth","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.feacadf3.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe58a20b-6990-4fee-a414-1ab0afb5a9c0'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n       return  instance.post<ResponseType<{userId: number}>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return  instance.get<ResponseType<MeResponseType>>('auth/me');\r\n        },\r\n    logout(){\r\n        return  instance.delete<ResponseType>('auth/login');\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string\r\n    rememberMe: boolean,\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, todolistsAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n   authAPI.login(data).then((res)=> {\r\n       if(res.data.resultCode === 0) {\r\n           dispatch(setIsLoggedInAC(true))\r\n           dispatch(setAppStatusAC('succeeded'))\r\n       } else {\r\n           handleServerAppError(res.data, dispatch);\r\n       }\r\n   })\r\n       .catch((error) => {\r\n           handleServerNetworkError(error, dispatch)\r\n       })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setInitializedAC=(isInitialized: boolean) =>({ type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\n\r\n\r\n//tnunk\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        debugger\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n\r\n    }).finally(()=> {\r\n        dispatch(setInitializedAC(true))\r\n    })\r\n}\r\n\r\n\r\nexport type SetInitializedActionType = ReturnType<typeof setInitializedAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetInitializedActionType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n           dispatch(setAppStatusAC('loading'))\r\n\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const isLoggedIn =useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (!isLoggedIn) {\r\n        <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n\r\n   const  dispatch =useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state =>state.auth.isLoggedIn )\r\n\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password='Required';\r\n            } else if (values.password.length <4 ){\r\n                errors.password='Must be at least 4 characters or more';\r\n            }\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch } from 'react-router-dom'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized=useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn=useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch =useDispatch()\r\n    useEffect(()=> {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n\r\n    const logoutHandler=()=> {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                  {isLoggedIn &&   <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n             { status === 'loading' &&  <LinearProgress /> }\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                <Route exact path={'/'} render={()=><TodolistsList demo={demo}/>}/>\r\n                <Route path={'/login'} render={()=><Login/>}/>\r\n                <Route path={'*'} render={()=><h1>404:Page not found</h1>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter><App/> </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}